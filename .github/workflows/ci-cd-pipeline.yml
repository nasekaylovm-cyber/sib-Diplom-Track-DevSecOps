name: CI/CD Security Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  APP_ENV: production
  SERVER_IP: ${{ secrets.SERVER_IP }}
  SERVER_USER: ${{ secrets.SERVER_SSH_USER }}

jobs:

  sast-analysis:
    name: "SAST Analysis"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, curl, gd, intl, mysql, zip
          tools: composer:v2

      - name: Download PHP Security Checker
        run: |
          curl -LOSs https://github.com/fabpot/local-php-security-checker/releases/download/v2.0.2/local-php-security-checker_2.0.2_linux_amd64
          chmod +x local-php-security-checker_2.0.2_linux_amd64
          sudo mv local-php-security-checker_2.0.2_linux_amd64 /usr/local/bin/local-php-security-checker

      - name: Run PHP Security Checker (Composer)
        run: local-php-security-checker

      - name: Install Psalm
        run: composer require --dev psalm/phpsalm --no-interaction --prefer-dist

      - name: Run Psalm Static Analysis
        run: ./vendor/bin/psalm --output-format=github --shepherd --stats

      - name: Install PHPStan
        run: composer require --dev phpstan/phpstan --no-interaction --prefer-dist

      - name: Run PHPStan Analysis
        run: ./vendor/bin/phpstan analyse --error-format=github

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Upload SAST reports artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sast-reports
          path: |
            psalm-report.xml
            phpstan-report.xml
          retention-days: 7

  secret-scan:
    name: "Secrets & Config Scan"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for secrets with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha || 'HEAD^' }}
          head: HEAD
          extra_args: --only-verified --json

      - name: Check for misconfigurations with Gitleaks
        uses: gitleaks/gitleaks-action@v2

  deploy-to-server:
    name: "Deploy to Production Server"
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    needs: [sast-analysis, secret-scan]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, curl, gd, intl, mysql, zip
          tools: composer:v2

      - name: Copy files to server via SSH
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_SSH_USER }}
          key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
          source: "., !node_modules, !vendor, !.git, !.github"
          target: "/var/www/bootstrap-cms/"
          strip_components: 1

      - name: Run composer install on server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_SSH_USER }}
          key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/bootstrap-cms
            composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist
            php artisan optimize:clear
            php artisan optimize
            php artisan migrate --force
            chown -R www-data:www-data /var/www/bootstrap-cms
            chmod -R 755 /var/www/bootstrap-cms/storage
            chmod -R 755 /var/www/bootstrap-cms/bootstrap/cache
            systemctl reload php8.2-fpm
            systemctl reload nginx

  dast-scan:
    name: "DAST Scan"
    runs-on: ubuntu-latest
    needs: deploy-to-server
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for application to be ready
        run: |
          until curl -f http://${{ secrets.SERVER_IP }}/ -o /dev/null 2>/dev/null; do
            echo "Waiting for server to be up..."
            sleep 5
          done

      - name: Run OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: "http://${{ secrets.SERVER_IP }}"
          cmd_options: "-a -j"

      - name: Upload DAST report artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dast-zap-report
          path: zap-report.html
          retention-days: 7
