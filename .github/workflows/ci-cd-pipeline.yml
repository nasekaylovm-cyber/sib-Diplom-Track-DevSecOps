name: CI/CD Security Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  APP_ENV: production
  SERVER_IP: ${{ secrets.SERVER_IP }}
  SERVER_USER: ${{ secrets.SERVER_SSH_USER }}

jobs:

  sast-analysis:
    name: "SAST Analysis"
    runs-on: ubuntu-latest
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤, –Ω–æ job –±—É–¥–µ—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ failed –ø—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, curl, gd, intl, mysql, zip
          tools: composer:v2

      - name: Download PHP Security Checker
        run: |
          curl -LOSs https://github.com/fabpot/local-php-security-checker/releases/download/v2.0.2/local-php-security-checker_2.0.2_linux_amd64
          chmod +x local-php-security-checker_2.0.2_linux_amd64
          sudo mv local-php-security-checker_2.0.2_linux_amd64 /usr/local/bin/local-php-security-checker

      - name: Run PHP Security Checker (Composer)
        id: security-check
        run: |
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–≤–æ–¥ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          local-php-security-checker 2>&1 | tee security-scan.log
          exit_code=$?
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
          
          # –í—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç, –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
          echo "scan_output<<EOF" >> $GITHUB_OUTPUT
          cat security-scan.log >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create security report
        if: always()
        run: |
          echo "### üîç PHP Security Checker Results" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat security-scan.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.security-check.outputs.exit_code }}" != "0" ]]; then
            echo "**‚ùå Found vulnerabilities that need to be addressed**" >> $GITHUB_STEP_SUMMARY
            echo "Run \`composer update\` to fix vulnerable dependencies" >> $GITHUB_STEP_SUMMARY
          else
            echo "**‚úÖ No known vulnerabilities found**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Install Psalm
        run: composer require --dev psalm/phpsalm

      - name: Run Psalm Static Analysis
        run: ./vendor/bin/psalm --output-format=github --shepherd --stats

      - name: Install PHPStan
        run: composer require --dev phpstan/phpstan

      - name: Run PHPStan Analysis
        run: ./vendor/bin/phpstan analyse --error-format=github

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Run npm audit
        run: npm audit --audit-level=high --json > npm-audit-report.json || true

      - name: Analyze npm audit results
        run: |
          if [ -f npm-audit-report.json ]; then
            echo "### üì¶ NPM Audit Results" >> $GITHUB_STEP_SUMMARY
            VULN_COUNT=$(jq '.metadata.vulnerabilities | .high + .critical' npm-audit-report.json)
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "**‚ùå Found $VULN_COUNT high/critical vulnerabilities**" >> $GITHUB_STEP_SUMMARY
              echo '```json' >> $GITHUB_STEP_SUMMARY
              jq '.advisories | to_entries[] | select(.value.severity == "high" or .value.severity == "critical") | .value.title' npm-audit-report.json >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            else
              echo "**‚úÖ No high/critical npm vulnerabilities found**" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Upload SAST reports artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports
          path: |
            security-scan.log
            npm-audit-report.json
          retention-days: 7

  secret-scan:
    name: "Secrets & Config Scan"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for secrets with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha || 'HEAD^' }}
          head: HEAD
          extra_args: --only-verified --json

      - name: Check for misconfigurations with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml

      - name: Create secrets scan summary
        if: always()
        run: |
          echo "### üîê Secrets Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "Secrets scanning completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "No secrets should be committed to the repository" >> $GITHUB_STEP_SUMMARY

  deploy-to-server:
    name: "Deploy to Production Server"
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    needs: [sast-analysis, secret-scan]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, curl, gd, intl, mysql, zip
          tools: composer:v2

      - name: Validate composer.json
        run: composer validate --strict

      - name: Copy files to server via SSH
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_SSH_USER }}
          key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
          source: "., !node_modules, !vendor, !.git, !.github, !storage/*, !bootstrap/cache/*"
          target: "/var/www/bootstrap-cms/"
          strip_components: 1

      - name: Run deployment commands on server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_SSH_USER }}
          key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/bootstrap-cms
            export COMPOSER_ALLOW_SUPERUSER=1
            composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist
            php artisan optimize:clear
            php artisan optimize
            php artisan migrate --force --no-interaction
            # Frontend build (if applicable)
            # npm install --production
            # npm run prod
            # Ensure proper permissions
            find . -type f -exec chmod 644 {} \;
            find . -type d -exec chmod 755 {} \;
            chmod -R 775 storage bootstrap/cache
            # Reload services
            sudo systemctl reload php8.2-fpm
            sudo systemctl reload nginx

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_SSH_USER }}
          key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
          script: |
            curl -f http://localhost/ -o /dev/null 2>/dev/null || exit 1
            echo "Deployment verified successfully"

  dast-scan:
    name: "DAST Scan"
    runs-on: ubuntu-latest
    needs: deploy-to-server
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for application to be ready
        run: |
          for i in {1..12}; do
            if curl -f http://${{ secrets.SERVER_IP }}/ -o /dev/null 2>/dev/null; then
              echo "Application is ready"
              exit 0
            fi
            echo "Waiting for application to start... ($i/12)"
            sleep 5
          done
          echo "Application did not start in time"
          exit 1

      - name: Run OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: "http://${{ secrets.SERVER_IP }}"
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a -j"

      - name: Upload DAST report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dast-zap-report
          path: |
            zap-report.html
            zap-report.json
          retention-days: 7

      - name: Create DAST scan summary
        if: always()
        run: |
          echo "### üåê DAST Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "OWASP ZAP full scan completed" >> $GITHUB_STEP_SUMMARY
          echo "Check the artifacts for detailed report" >> $GITHUB_STEP_SUMMARY

  security-gateway:
    name: "Security Gateway"
    runs-on: ubuntu-latest
    needs: [sast-analysis, secret-scan, dast-scan]
    if: always()

    steps:
      - name: Download SAST reports
        uses: actions/download-artifact@v4
        with:
          name: sast-reports
          path: ./sast-reports

      - name: Check for critical security issues
        run: |
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º PHP security checker
          if [ -f ./sast-reports/security-scan.log ]; then
            if grep -q "Vulnerabilities" ./sast-reports/security-scan.log || 
               grep -q "ERROR" ./sast-reports/security-scan.log; then
              echo "‚ùå PHP dependencies have known vulnerabilities"
              echo "Please run 'composer update' to fix vulnerable dependencies"
              cat ./sast-reports/security-scan.log
              exit 1
            fi
          fi
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º npm audit results
          if [ -f ./sast-reports/npm-audit-report.json ]; then
            CRITICAL_VULNS=$(jq '.metadata.vulnerabilities | .critical + .high' ./sast-reports/npm-audit-report.json)
            if [ "$CRITICAL_VULNS" -gt 0 ]; then
              echo "‚ùå Found $CRITICAL_VULNS critical/high npm vulnerabilities"
              exit 1
            fi
          fi
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—Ä—É–≥–∏—Ö —Å–∫–∞–Ω–µ—Ä–æ–≤
          if [[ "${{ needs.secret-scan.result }}" != "success" ]]; then
            echo "‚ùå Secrets scan found issues - blocking deployment"
            exit 1
          fi
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–ø–ª–æ–π –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º
          if [[ "${{ needs.deploy-to-server.result }}" != "success" ]]; then
            echo "‚ùå Deployment failed - blocking further steps"
            exit 1
          fi
          
          echo "‚úÖ All security checks passed"

      - name: Create final security summary
        if: always()
        run: |
          echo "## üõ°Ô∏è Security Gateway Final Result" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Status Overview:" >> $GITHUB_STEP_SUMMARY
          echo "- SAST Analysis: ${{ needs.sast-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Secrets Scan: ${{ needs.secret-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Deployment: ${{ needs.deploy-to-server.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- DAST Scan: ${{ needs.dast-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "### ‚úÖ All security checks passed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "Deployment is approved and completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Security check failed!" >> $GITHUB_STEP_SUMMARY
            echo "Deployment blocked due to security issues" >> $GITHUB_STEP_SUMMARY
            echo "Please check the detailed reports in each job" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Fail deployment on security issues
        if: failure()
        run: |
          echo "Security gateway blocked deployment due to identified vulnerabilities"
          exit 1
